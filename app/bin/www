#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');
const db = require('../db/mongodb')
const argv = require("yargs").argv;

/**
 * Create HTTP server.
 */

const publicServer = http.createServer(app.public);
const privateServer = http.createServer(app.private);

db.connect().then(() => {
    //Used for dumping random data (Usually for testing purposes)
    if (argv.randomDataDump)
        require("../data-dump/random")().then(() => {
            startService();
        });
    else {
        startService();
    }
})

const startService = () => {
     //Listening on public port
     publicServer.listen(app.public.get('port'));
     publicServer.on('error', onError);
     publicServer.on('listening', () => onListening(publicServer));
     
     //Listening on private port
     privateServer.listen(app.private.get('port'));
     privateServer.on('error', onError);
     privateServer.on('listening', () => onListening(privateServer));
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) 
{
    const port = parseInt(val, 10);

    if (isNaN(port)) 
    {
        // named pipe
        return val;
    }

    if (port >= 0) 
    {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) 
{
    if (error.syscall !== 'listen') 
    {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) 
    {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) 
{
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
